package fr.uge.clonewar.backend.database;

import io.helidon.dbclient.DbClient;

import java.util.Objects;

/**
 * Represents a File entity of the database.
 */
public class FileTable {
  /**
   * Represents a Row of the File entity.
   * @param filename The filename of a file
   * @param extension The extension of this file
   * @param content The content of the file
   * @param artefactId The id of the artefact that contains the file
   */
  public record FileRow(String filename, String extension, String content, int artefactId) {
    public FileRow {
      Objects.requireNonNull(filename);
      Objects.requireNonNull(extension);
      Objects.requireNonNull(content);
    }
  }

  private final DbClient dbClient;

  /**
   * Creates an instance of the entity.
   * @param dbClient The database connection
   */
  public FileTable(DbClient dbClient) {
    Objects.requireNonNull(dbClient);
    this.dbClient = dbClient;
    createTable();
  }

  private void createTable() {
    dbClient.execute(exec -> exec.update("CREATE TABLE IF NOT EXISTS file(id integer, filename VARCHAR, " +
            "extension VARCHAR, content TEXT, artefactId integer, PRIMARY KEY(id))"))
        .exceptionally(t -> {
          System.err.println(t.getMessage());
          return null;
        }).await();
  }

  /**
   * Insert a row to the database.
   * @param file The row to be inserted
   * @return The id autogenerated by the database
   */
  public int insert(FileRow file) {
    Objects.requireNonNull(file);
    return dbClient.execute(exec ->
            exec.query("INSERT INTO file(filename, extension, content, artefactId) VALUES (?, ?, ?, ?) RETURNING id",
                file.filename, file.extension, file.content, file.artefactId)
        ).first()
        .map(row -> row.column("id").as(Integer.class))
        .await();
  }

}
